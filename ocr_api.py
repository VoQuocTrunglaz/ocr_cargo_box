import os
import cv2
import json
import re
import numpy as np
from paddleocr import PaddleOCR
from ultralytics import YOLO
import google.generativeai as genai
from fastapi import FastAPI,  File, UploadFile, HTTPException, UploadFile

# C·∫•u h√¨nh API Gemini
API_KEY = "AIzaSyAlL5ivuNQnSQxc7UwKxsSrgRygFsetqLo"
genai.configure(api_key=API_KEY)

BASE_DIR = os.getcwd()
MODEL_DIR = os.path.join(BASE_DIR, "model", "runs", "detect")
UPLOAD_DIR = os.path.join(BASE_DIR, "uploads")

def get_latest_model():
    train_folders = sorted(
        [f for f in os.listdir(MODEL_DIR) if f.startswith("train")],
        key=lambda f: os.path.getmtime(os.path.join(MODEL_DIR, f)),
        reverse=True
    )
    if not train_folders:
        raise FileNotFoundError("Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh YOLO!")

    model_path = os.path.join(MODEL_DIR, train_folders[0], "weights", "best.pt")
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y model t·∫°i: {model_path}")

    return model_path

MODEL_PATH = get_latest_model()

os.makedirs(UPLOAD_DIR, exist_ok=True)

# üîπ Load m√¥ h√¨nh YOLO & PaddleOCR
yolo_model = YOLO(MODEL_PATH)
ocr = PaddleOCR(lang="en",
                det_db_box_thresh=0.2, 
                rec_algorithm="CRNN", 
                use_angle_cls=True,
                det_db_unclip_ratio=1.8)

# Kh·ªüi t·∫°o Flask
app = FastAPI(title="OCR Container API", version="1.0", description="API nh·∫≠n di·ªán ch·ªØ tr√™n container")
UPLOAD_FOLDER = "uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.get('/')
def home():
    return {"message": "Hello, OCR API is running!"}

@app.post("/uploads/")
async def upload_file(file: UploadFile = File(...)):
    if not file.filename.lower().endswith((".jpg", ".jpeg", ".png")):
        raise HTTPException(status_code=400, detail="File ph·∫£i l√† ƒë·ªãnh d·∫°ng JPG ho·∫∑c PNG")
    
    filepath = os.path.join(UPLOAD_FOLDER, file.filename)
    with open(filepath, "wb") as buffer:
        buffer.write(await file.read())
    
    result = process_ocr_with_gemini(filepath)
    return result

@app.get("/uploads/")
def list_uploaded_files():
    files = os.listdir(UPLOAD_DIR)
    return {"uploaded_files": files}

def process_ocr_with_gemini(image_path):
    """Chu·ªói x·ª≠ l√Ω ƒë·∫ßy ƒë·ªß: ph√°t hi·ªán ch·ªØ, c·∫Øt ·∫£nh, nh·∫≠n di·ªán vƒÉn b·∫£n, ph√¢n lo·∫°i b·∫±ng Gemini"""
    image, cropped_images = detect_text(image_path)
    if not cropped_images:
        return {"message": "No text detected"}
    
    detected_texts = []
    for cropped_path, _ in cropped_images:
        texts = recognize_text(cropped_path)
        detected_texts.extend([text for text, _ in texts])
    
    if not detected_texts:
        return {"message": "No readable text found"}
    
    classification_result = classify_with_gemini(detected_texts)
    return {"classification_result": classification_result}

def detect_text(image_path):
    image = cv2.imread(image_path)
    results = yolo_model(image)[0]
    cropped_images = []
    
    for i, bbox in enumerate(results.boxes.xyxy):
        xmin, ymin, xmax, ymax = map(int, bbox.tolist())
        cropped = image[ymin:ymax, xmin:xmax]
        cropped_path = f"uploads/cropped_{i}.jpg"
        cv2.imwrite(cropped_path, cropped)
        cropped_images.append((cropped_path, (xmin, ymin, xmax, ymax)))
    
    return image, cropped_images

def recognize_text(image_path):
    results = ocr.ocr(image_path, cls=True)
    if not results or results[0] is None:
        return []
    
    recognized_texts = []
    for result in results[0]:
        if len(result) < 2:
            continue
        bbox, (text, confidence) = result
        recognized_texts.append((text, confidence))
    
    return recognized_texts

def classify_with_gemini(texts):
    """Ph√¢n lo·∫°i danh s√°ch vƒÉn b·∫£n v√†o JSON v·ªõi ƒë·ªãnh d·∫°ng chi ti·∫øt."""
    prompt = (
        "H√£y ki·ªÉm tra danh s√°ch d·ªØ li·ªáu sau, s·ª≠a c√°c ƒë∆°n v·ªã ƒëo b·ªã sai (n·∫øu c√≥)"
        "H√£y ph√¢n lo·∫°i danh s√°ch sau th√†nh JSON theo format d∆∞·ªõi ƒë√¢y. "
        "Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ m√¥ t·∫£, kh√¥ng c√≥ text d∆∞ th·ª´a.\n\n"
        "FORMAT JSON Y√äU C·∫¶U:\n"
        "```json\n"
        "{\n"
        '  "container_number": {\n'
        '    "prefix": "",\n'
        '    "serial": "",\n'
        '    "type_code": ""\n'
        "  },\n"
        '  "container_info": {\n'
        '    "max_gross": {"":"kg": "", "lbs": "" },\n'
        '    "tare_weight": { "kg": "", "lbs": "" },\n'
        '    "max_payload": { "kg": "", "lbs": "" },\n'
        '    "cube_volume": { "m3": "", "cuft": "" }\n'
        "  }\n"
        "}\n"
        "```\n\n"
        "C√ÅCH PH√ÇN LO·∫†I:\n"
        "- `container_number` g·ªìm:\n"
        "  - `prefix`: 4 ch·ªØ c√°i ƒë·∫ßu c·ªßa s·ªë container.\n"
        "  - `serial`: 6 ch·ªØ s·ªë cu·ªëi c·ªßa s·ªë container.\n"
        "  - `type_code`: M√£ lo·∫°i container.\n"
        "- `container_info` g·ªìm:\n"
        "  - `max_gross`: Gi√° tr·ªã c·ªßa MAX.GROSS (c·∫£ kg v√† lbs).\n"
        "  - `tare_weight`: Gi√° tr·ªã c·ªßa TARE (c·∫£ kg v√† lbs).\n"
        "  - `max_payload`: Gi√° tr·ªã c·ªßa MAX.PAYLOAD ho·∫∑c NET (c·∫£ kg v√† lbs).\n"
        "  - `cube_volume`: Gi√° tr·ªã c·ªßa CUBE (c·∫£ m¬≥ v√† cuft).\n\n"
        f"üîπ D·ªØ li·ªáu ƒë·∫ßu v√†o: {texts}\n"
        "üîπ Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá!"
    )
    try:
        model = genai.GenerativeModel("gemini-2.0-flash")
        response = model.generate_content(prompt)
        
        json_match = re.search(r'\{.*\}', response.text, re.DOTALL)
        if not json_match:
            return None
        
        return json.loads(json_match.group(0))
    except:
        return None

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
